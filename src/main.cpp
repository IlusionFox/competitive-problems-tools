#include <functional>
#include <iostream>
#include <map>

#include <unistd.h>
#include <getopt.h>

#include "defs.h"
#include "init.h"
#include "error.h"

#include "clean.h"
#include "gentex.h"


std::map<std::string, std::function<int(int, char *const [])>> commands {
    { "init", init },
    { "clean", clean },
    { "gentex", gentex },
};

static struct option longopts[] = {
   { "help", no_argument, NULL, 'f' },
   { "version", no_argument, NULL, 'v' },
   { 0, 0, 0, 0 }
};


static std::string usage()
{
    return "Usage: " NAME " [-h] [-v] action";
}

static std::string help()
{
    const std::string message {
R"message(
Format, test and pack competitive programming problems.

    Action              Description

    init                Generate template files on current directory.
    clean               Remove autogenerated files.
)message" };

    return usage() + message;
}

std::string version()
{
    const std::string header { NAME " " VERSION "\n" };
    const std::string body { 
R"body(License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Edson Alves.)body" };

    return header + body;
}

int main(int argc, char* const argv[])
{
    if (argc < 2)
    {
        std::cout << usage() << '\n';
        return CP_TOOLS_ERROR_MISSING_ARGUMENT;
    }

    auto command = argv[1];

    for (const auto& [cmd, exec] : commands)
    {
        if (cmd == command)
            return exec(argc, argv);
    }

    int option = -1;

    while ((option = getopt_long(argc, argv, "hv", longopts, NULL)) != -1)
    {
        switch (option) {
        case 'v':
            std::cout << version() << '\n';
            return CP_TOOLS_OK;
        
        case 'h':
            std::cout << help() << '\n';
            return CP_TOOLS_OK;

        default:
            std::cout << help() << '\n';
            return CP_TOOLS_ERROR_INVALID_PARAMETER;
        }
    }

    return CP_TOOLS_OK;
}
